{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["TodoList","todos","setModal","setSelectedTodo","selectedTodoId","setSelectedTodoId","className","map","todo","id","completed","cn","title","type","onClick","TodoFilter","setFilter","setSearchTerm","searchTerm","useState","isSearchEmpty","setIsSearchEmpty","onChange","event","selectedFilter","target","value","placeholder","newSearchTerm","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","user","setUser","useEffect","userId","href","email","name","App","setTodos","isLoading","setIsLoading","modal","filter","selectedTodo","finally","toLowerCase","includes","isVisible","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fbf4fca8.chunk.js","sourcesContent":["import React from 'react';\nimport cn from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype ListProps = {\n  todos: Todo[];\n  setModal: (isVisible: boolean) => void;\n  setSelectedTodo: (todo: Todo | null) => void;\n  selectedTodoId: number | null;\n  setSelectedTodoId: (id: number | null) => void;\n};\n\nexport const TodoList: React.FC<ListProps> = ({\n  todos,\n  setModal,\n  setSelectedTodo,\n  selectedTodoId,\n  setSelectedTodoId,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n      <tbody>\n        {todos.map((todo) => (\n          <tr key={todo.id} data-cy=\"todo\" className=\"\">\n            <td className=\"is-vcentered\">{todo.id}</td>\n            <td className=\"is-vcentered\">\n              {todo.completed && (\n                <span className=\"icon\" data-cy=\"iconCompleted\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              )}\n            </td>\n            <td className=\"is-vcentered is-expanded\">\n              <p\n                className={cn({\n                  'has-text-danger': !todo.completed,\n                  'has-text-success': todo.completed,\n                })}\n              >\n                {todo.title}\n              </p>\n            </td>\n            <td className=\"has-text-right is-vcentered\">\n              <button\n                data-cy=\"selectButton\"\n                className=\"button\"\n                type=\"button\"\n                onClick={() => {\n                  setModal(true);\n                  setSelectedTodo(todo);\n                  setSelectedTodoId(todo.id);\n                }}\n              >\n                <span className=\"icon\">\n                  {selectedTodoId === todo.id ? (\n                    <i className=\"far fa-eye-slash\" />\n                  ) : (\n                    <i className=\"far fa-eye\" />\n                  )}\n                </span>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useState } from 'react';\nimport { Filter } from '../../types/Filter';\n\ntype TodoFilterProps = {\n  setFilter: (filter: Filter) => void;\n  searchTerm: string;\n  setSearchTerm: (searchTerm: string) => void;\n};\n\nexport const TodoFilter: React.FC<TodoFilterProps> = ({\n  setFilter,\n  setSearchTerm,\n  searchTerm,\n}) => {\n  const [isSearchEmpty, setIsSearchEmpty] = useState(true);\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selectedFilter: Filter = event.target.value as Filter;\n\n    setFilter(selectedFilter);\n  };\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newSearchTerm = event.target.value;\n\n    setSearchTerm(newSearchTerm);\n    setIsSearchEmpty(newSearchTerm === '');\n  };\n\n  const handleClearSearch = () => {\n    setSearchTerm('');\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleFilterChange}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={searchTerm}\n          onChange={handleSearchChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {!isSearchEmpty && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearSearch}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\n\ntype TodoModalProps = {\n  setModal: (boolean: boolean) => void;\n  todo: Todo;\n};\n\nexport const TodoModal: React.FC<TodoModalProps> = ({ setModal, todo }) => {\n  const [user, setUser] = useState<User | null>(null);\n\n  useEffect(() => {\n    getUser(todo.userId).then(setUser);\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {!user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {todo.id}\n            </div>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => {\n                setModal(false);\n              }}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {todo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {todo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n\n              {user && <a href={`mailto:${user.email}`}>{user.name}</a>}\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos /* getUser */ } from './api';\nimport { Todo } from './types/Todo';\nimport { Filter } from './types/Filter';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [modal, setModal] = useState(false);\n  const [filter, setFilter] = useState<Filter>('all');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [selectedTodoId, setSelectedTodoId] = useState<number | null>(null);\n\n  const visibleTodos = () => {\n    const visible = [...todos].filter((todo) => {\n      if (filter === 'active' && todo.completed) {\n        return false;\n      }\n\n      if (filter === 'completed' && !todo.completed) {\n        return false;\n      }\n\n      if (!todo.title.toLowerCase().includes(searchTerm.toLowerCase())) {\n        return false;\n      }\n\n      return true;\n    });\n\n    return visible;\n  };\n\n  useEffect(() => {\n    getTodos()\n      .then((todo) => {\n        setTodos(todo);\n      })\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setFilter={setFilter}\n                setSearchTerm={setSearchTerm}\n                searchTerm={searchTerm}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading ? (\n                <Loader />\n              ) : (\n                <TodoList\n                  todos={visibleTodos()}\n                  setModal={setModal}\n                  setSelectedTodo={setSelectedTodo}\n                  selectedTodoId={selectedTodoId}\n                  setSelectedTodoId={setSelectedTodoId}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n      {modal && (\n        <TodoModal\n          setModal={(isVisible: boolean) => {\n            setModal(isVisible);\n            if (!isVisible) {\n              setSelectedTodoId(null);\n            }\n          }}\n          todo={\n            selectedTodo || {\n              id: 0,\n              title: '',\n              completed: false,\n              userId: 0,\n            }\n          }\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}